# -*- coding: utf-8 -*-
import logging
import httpx        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è RSS –∏ Perplexity
import feedparser   # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS
import ssl          # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SSL –æ—à–∏–±–æ–∫
from datetime import datetime, time as dtime, timezone
import pandas as pd

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, CommandHandler
from telegram.constants import ParseMode
from telegram.error import TelegramError, Forbidden, BadRequest # –î–æ–±–∞–≤–∏–ª–∏ BadRequest

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from .. import config
from ..openai_client import get_async_openai_client # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –∫–ª–∏–µ–Ω—Ç
from ..post_logger import read_top_posts, read_posts, log_post
from ..prompts import PROMPT_TMPL_IDEA, PROMPT_TMPL_NEWS, PROMPT_TMPL_RESEARCH
from ..utils import get_best_posting_time
from .callbacks import INLINE_ACTION_KB # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
from .jobs import auto_post_job # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞

logger = logging.getLogger(__name__)

# --- Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é) ---
MENU_KB = ReplyKeyboardMarkup(
    [
        ["üí° –ò–¥–µ—è", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É"],
        ["üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", "üîç –†–µ—Å—ë—Ä—á PPLX"],
        ["‚öôÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç"],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
    is_persistent=True
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω—É."""
    if not update.message or not update.effective_user: return
    user_id = update.effective_user.id
    if user_id != config.ADMIN_ID:
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /start –æ—Ç user_id: {user_id}")
        return
    try:
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=MENU_KB
        )
    except (TelegramError, Forbidden) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {user_id}: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /idea (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí° –ò–¥–µ—è") ---
async def generate_idea(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'typing': {e}")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –ª–æ–≥–∞
        logger.debug("–ó–∞–ø—Ä–æ—Å —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏...")
        top_posts_df = read_top_posts(5)
        if not top_posts_df.empty:
            posts_context = top_posts_df[['text', 'reactions']].to_string(index=False, header=True)
            logger.debug(f"–¢–æ–ø –ø–æ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –ö–æ–Ω—Ç–µ–∫—Å—Ç ({len(posts_context)} —Å–∏–º–≤.):\n{posts_context[:500]}...")
        else:
            posts_context = "(–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–∞—Ö)"
            logger.debug("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = PROMPT_TMPL_IDEA.format(posts=posts_context)
        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI ({len(prompt)} —Å–∏–º–≤.).")

        # 3. –í—ã–∑—ã–≤–∞–µ–º OpenAI API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        openai_client = get_async_openai_client()
        if not openai_client:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è generate_idea.")
             await ctx.bot.send_message(config.ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI.")
             return

        draft = None
        last_err = None
        used_model = config.MODEL

        async def try_generate(model_name):
            nonlocal draft, last_err, used_model
            try:
                 logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI (–º–æ–¥–µ–ª—å: {model_name}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏...")
                 resp = await openai_client.chat.completions.create(
                    model=model_name,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=1200, # –£–≤–µ–ª–∏—á–∏–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                    temperature=0.7, # –ú–æ–∂–Ω–æ —á—É—Ç—å —É–º–µ–Ω—å—à–∏—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
                 )
                 if resp.choices and resp.choices[0].message and resp.choices[0].message.content:
                     draft = resp.choices[0].message.content.strip()
                     used_model = model_name
                     logger.info(f"–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å—é {model_name}.")
                     return True
                 else:
                     logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI –º–æ–¥–µ–ª–∏ {model_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
                     last_err = "–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
                     return False
            except Exception as e:
                 last_err = e
                 logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {type(e).__name__}: {e}")
                 # –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è PermissionDeniedError
                 if isinstance(e, Forbidden) or (hasattr(e, 'code') and e.code == 'unsupported_country_region_territory'):
                     logger.error("-> –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI API (403 Forbidden / unsupported_country). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞.")
                 return False

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {config.MODEL}")
        success = await try_generate(config.MODEL)

        if not success and config.MODEL != "gpt-3.5-turbo":
             logger.warning(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å {config.MODEL} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É—é gpt-3.5-turbo...")
             success = await try_generate("gpt-3.5-turbo")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        if success and draft:
            notice = "üí° –ß–µ—Ä–Ω–æ–≤–∏–∫:"
            if used_model != config.MODEL:
                 notice = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {used_model}.\n{notice}"
            await ctx.bot.send_message(config.ADMIN_ID, f"{notice}\n{draft}", reply_markup=INLINE_ACTION_KB)
        elif draft is None and success:
            error_message = "‚ùå –û—à–∏–±–∫–∞: OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
            logger.error(error_message)
            await ctx.bot.send_message(config.ADMIN_ID, error_message)
        else:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {type(last_err).__name__}"
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            if isinstance(last_err, Forbidden) or (hasattr(last_err, 'code') and last_err.code == 'unsupported_country_region_territory'):
                 error_text += "\n(–í–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.)"
            else:
                 error_text += f": {last_err}" # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫

            logger.error(f"–û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_err}", exc_info=isinstance(last_err, Exception))
            await ctx.bot.send_message(config.ADMIN_ID, error_text)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_idea: {e}", exc_info=True)
        try:
            # –£–ø—Ä–æ—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {type(e).__name__}")
        except Exception as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ generate_idea –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /news (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì∞ –ù–æ–≤–æ—Å—Ç–∏") (–ò—Å–ø–æ–ª—å–∑—É–µ–º HTTX) ---
async def generate_news_post(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS, –∏—Å–ø–æ–ª—å–∑—É—è httpx."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'typing': {e}")

    rss_url = config.NEWS_RSS_URL
    if not rss_url:
         logger.error("URL RSS –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (NEWS_RSS_URL).")
         await ctx.bot.send_message(config.ADMIN_ID, "‚ùå URL RSS –ª–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
         return

    # --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ RSS –ª–µ–Ω—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º httpx ---
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS (httpx): {rss_url}")
    feed_data = {}
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx.AsyncClient –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async with httpx.AsyncClient(timeout=30.0, follow_redirects=True, verify=True) as client:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            response = await client.get(rss_url, headers=headers)

            logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç RSS —Å–µ—Ä–≤–µ—Ä–∞: –°—Ç–∞—Ç—É—Å {response.status_code}")
            response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (4xx, 5xx)

            rss_content = response.content
            if not rss_content:
                 logger.error(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç RSS URL: {rss_url}")
                 await ctx.bot.send_message(config.ADMIN_ID, "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç RSS-—Å–µ—Ä–≤–µ—Ä–∞.")
                 return

            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({len(rss_content)} –±–∞–π—Ç)...")
            feed_data = feedparser.parse(rss_content)
            logger.info(f"RSS –ª–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ feedparser.")

    except httpx.HTTPStatusError as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {e.response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RSS {rss_url}", exc_info=False)
        await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return
    except httpx.TimeoutException as e:
         logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RSS {rss_url}: {e}", exc_info=False)
         await ctx.bot.send_message(config.ADMIN_ID, "‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
         return
    except httpx.RequestError as e:
        # –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ SSL –æ—à–∏–±–∫–∏
        if isinstance(e, httpx.ConnectError) and e.__cause__ and isinstance(e.__cause__, ssl.SSLError):
             ssl_error_details = repr(e.__cause__)
             logger.error(f"–û—à–∏–±–∫–∞ SSL –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ RSS {rss_url}: {ssl_error_details}", exc_info=False)
             await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ SSL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {type(e.__cause__).__name__}")
        else:
             logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RSS {rss_url}: {e}", exc_info=True)
             await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {type(e).__name__}")
        return
    except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, feedparser)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RSS {rss_url}: {e}", exc_info=True)
        await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSS –ª–µ–Ω—Ç—ã: {type(e).__name__}")
        return
    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS ---

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    if not feed_data or feed_data.get('bozo', 1) or not feed_data.entries:
        bozo_exception = feed_data.get('bozo_exception', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞')
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RSS ({rss_url}) –∏–ª–∏ –ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞. Bozo: {feed_data.get('bozo', 'N/A')}, Exception: {bozo_exception}")
        error_msg_detail = type(bozo_exception).__name__ if bozo_exception != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' else bozo_exception
        await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS: {error_msg_detail}")
        return

    # --- –ë–ª–æ–∫ 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π ---
    news_items_context = ""
    from bs4 import BeautifulSoup
    for entry in feed_data.entries[:7]:
        title = entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        summary = entry.get('summary', '')
        summary_text = BeautifulSoup(summary, "html.parser").get_text(separator=' ', strip=True)
        news_items_context += f"- {title}: {summary_text[:150]}...\n"

    if not news_items_context:
         logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∑–∞–ø–∏—Å–µ–π RSS.")
         await ctx.bot.send_message(config.ADMIN_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS.")
         return
    logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n{news_items_context}")

    # --- –ë–ª–æ–∫ 3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ ---
    prompt = PROMPT_TMPL_NEWS.format(news_items=news_items_context)

    # --- –ë–ª–æ–∫ 4: –í—ã–∑–æ–≤ OpenAI ---
    openai_client = get_async_openai_client()
    if not openai_client:
         logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è generate_news_post.")
         await ctx.bot.send_message(config.ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI.")
         return

    draft = None
    last_err = None
    used_model = config.MODEL

    async def try_generate_news(model_name):
        nonlocal draft, last_err, used_model
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI (–º–æ–¥–µ–ª—å: {model_name}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
            resp = await openai_client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=1500, # –£–≤–µ–ª–∏—á–∏–º –¥–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤
                temperature=0.65,
            )
            if resp.choices and resp.choices[0].message and resp.choices[0].message.content:
                 draft = resp.choices[0].message.content.strip()
                 used_model = model_name
                 logger.info(f"–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é {model_name}.")
                 return True
            else:
                 logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI –º–æ–¥–µ–ª–∏ {model_name} (–Ω–æ–≤–æ—Å—Ç–∏) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
                 last_err = "–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
                 return False
        except Exception as e:
            last_err = e
            logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (–Ω–æ–≤–æ—Å—Ç–∏): {type(e).__name__}: {e}")
            if isinstance(e, Forbidden) or (hasattr(e, 'code') and e.code == 'unsupported_country_region_territory'):
                logger.error("-> –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI API (403 Forbidden / unsupported_country). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return False

    success = await try_generate_news(config.MODEL)
    if not success and config.MODEL != "gpt-3.5-turbo":
        logger.warning(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å {config.MODEL} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–±—É—é gpt-3.5-turbo...")
        success = await try_generate_news("gpt-3.5-turbo")

    # --- –ë–ª–æ–∫ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    if success and draft:
        notice = "üì∞ –ù–æ–≤–æ—Å—Ç—å:"
        if used_model != config.MODEL:
             notice = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {used_model}.\n{notice}"
        await ctx.bot.send_message(config.ADMIN_ID, f"{notice}\n{draft}", reply_markup=INLINE_ACTION_KB)
    elif draft is None and success:
         error_message = "‚ùå –û—à–∏–±–∫–∞: OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏."
         logger.error(error_message)
         await ctx.bot.send_message(config.ADMIN_ID, error_message)
    else:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {type(last_err).__name__}"
        if isinstance(last_err, Forbidden) or (hasattr(last_err, 'code') and last_err.code == 'unsupported_country_region_territory'):
             error_text += "\n(–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞/–ø—Ä–æ–∫—Å–∏.)"
        else:
             error_text += f": {last_err}"

        logger.error(f"–û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_err}", exc_info=isinstance(last_err, Exception))
        await ctx.bot.send_message(config.ADMIN_ID, error_text)

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    # except Exception as e:
    #     logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_news_post: {e}", exc_info=True)
    #     try:
    #         await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {type(e).__name__}")
    #     except Exception as send_e:
    #          logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ generate_news_post –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /stats (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") ---
async def show_stats(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª—É—á—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä–∞—Ñ–∏–∫."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='upload_photo')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'upload_photo': {e}")

    try:
        logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞...")
        best_time, plot_path = get_best_posting_time() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        message = f"üìä **–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π**\n\n"
        message += f"üïí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (UTC): **{best_time}**\n\n" # –£—Ç–æ—á–Ω–∏–ª–∏ UTC
        message += f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º (UTC):"

        await ctx.bot.send_message(config.ADMIN_ID, message, parse_mode=ParseMode.MARKDOWN)

        if plot_path and plot_path.exists():
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {plot_path}")
            try:
                 with open(plot_path, "rb") as photo_file:
                     await ctx.bot.send_photo(config.ADMIN_ID, photo=photo_file)
                 logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {plot_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
            except FileNotFoundError:
                 logger.error(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {plot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                 await ctx.bot.send_message(config.ADMIN_ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except (TelegramError, Forbidden) as e:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {plot_path} –∞–¥–º–∏–Ω—É: {e}")
                 await ctx.bot.send_message(config.ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞: {type(e).__name__}")
        elif plot_generated := plot_path: # –ï—Å–ª–∏ –ø—É—Ç—å –±—ã–ª, –Ω–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            logger.warning(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {plot_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await ctx.bot.send_message(config.ADMIN_ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫.")
        else: # –ï—Å–ª–∏ plot_path –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ None
             logger.info("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞).")
             await ctx.bot.send_message(config.ADMIN_ID, "üìâ –ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞).")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_stats: {e}", exc_info=True)
        try:
            await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {type(e).__name__}")
        except Exception as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ show_stats –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /auto_best (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É") ---
async def set_auto_post_best_time(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    if not ctx.job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è set_auto_post_best_time.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...")
        best_time_str, _ = get_best_posting_time()
        try:
            hour = int(best_time_str.split(":")[0])
        except (ValueError, IndexError, TypeError) as time_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è '{best_time_str}': {time_e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ.")
            hour = int(config.DEFAULT_POST_TIME.split(":")[0])
            best_time_str = f"{hour:02d}:00"

        post_time = dtime(hour=hour, minute=0, second=0, tzinfo=timezone.utc)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {post_time.strftime('%H:%M')} UTC")

        current_jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
        removed_count = 0
        for job in current_jobs:
            job.schedule_removal()
            removed_count += 1
        if removed_count > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á '{config.DAILY_AUTO_POST_JOB}'.")

        ctx.job_queue.run_daily(
            callback=auto_post_job,
            time=post_time,
            name=config.DAILY_AUTO_POST_JOB,
            data={"channel_id": config.CHANNEL_ID, "admin_id": config.ADMIN_ID}
        )

        logger.info(f"–ó–∞–¥–∞—á–∞ '{config.DAILY_AUTO_POST_JOB}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {post_time.strftime('%H:%M')} UTC.")
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ **{best_time_str} UTC** –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}", exc_info=True)
        try:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {type(e).__name__}")
        except Exception as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ set_auto_post_best_time –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /weekly_report (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é") ---
async def weekly_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'typing': {e}")

    try:
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        df = read_posts()
        if df.empty or 'dt' not in df.columns or df['dt'].isnull().all():
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
            return

        if df['dt'].dt.tz is None:
            logger.warning("–¢–∞–π–º–∑–æ–Ω—ã –≤ –ª–æ–≥–µ –Ω–µ—Ç. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è UTC.")
            df['dt'] = df['dt'].dt.tz_localize(timezone.utc)

        now = datetime.now(timezone.utc)
        one_week_ago = now - pd.Timedelta(days=7)
        weekly_df = df[df['dt'] > one_week_ago].copy()

        if weekly_df.empty:
            logger.info("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
            await update.message.reply_text("üìâ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ª–æ–≥–µ.")
            return

        total_posts = len(weekly_df)
        average_reactions = weekly_df['reactions'].fillna(0).mean()
        total_reactions = weekly_df['reactions'].fillna(0).sum()
        top_posts = weekly_df.nlargest(3, 'reactions')

        report = f"üìÖ **–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é** ({one_week_ago.strftime('%d.%m.%Y')} - {now.strftime('%d.%m.%Y')})\n\n"
        report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
        report += f"üìà –°—É–º–º–∞ —Ä–µ–∞–∫—Ü–∏–π: {int(total_reactions)}\n"
        report += f"üìä –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ä–µ–∞–∫—Ü–∏–π: {average_reactions:.1f}\n\n"

        if not top_posts.empty:
            report += "üèÜ **–¢–æ–ø-3 –ø–æ—Å—Ç–∞ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º:**\n"
            for index, row in top_posts.iterrows():
                 text_preview = row['text'].replace('\n', ' ').strip()[:70]
                 report += f"  üî• {int(row['reactions'])} —Ä–µ–∞–∫—Ü–∏–π - _{text_preview}..._\n"
        else:
            report += "‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.\n"

        await ctx.bot.send_message(config.ADMIN_ID, report, parse_mode=ParseMode.MARKDOWN)
        logger.info("–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        try:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {type(e).__name__}")
        except Exception as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ weekly_report –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /research (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîç –†–µ—Å—ë—Ä—á PPLX") (–ò–°–ü–†–ê–í–õ–ï–ù–ê–Ø –ú–û–î–ï–õ–¨ –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö) ---
async def research_perplexity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Perplexity API."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    if not config.PPLX_API_KEY:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Perplexity –±–µ–∑ API –∫–ª—é—á–∞.")
        await ctx.bot.send_message(config.ADMIN_ID, "‚ùóÔ∏è API-–∫–ª—é—á Perplexity (PPLX_API_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    query = " ".join(ctx.args) if ctx.args else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Perplexity API –ø–æ —Ç–µ–º–µ: '{query}'")
    try:
        await update.message.reply_text(f"üî¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/chat_action –≤ research_perplexity: {e}")

    headers = {
        "Authorization": f"Bearer {config.PPLX_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    payload = {
        "model": "sonar", # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è/–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        "messages": [
            {"role": "system", "content": "You are an AI assistant writing concise and engaging Telegram posts for an IT audience."}, # –£—Ç–æ—á–Ω–∏–ª–∏ —Ä–æ–ª—å
            {"role": "user", "content": PROMPT_TMPL_RESEARCH.format(query=query)}
        ],
        "stream": False,
    }

    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            res = await client.post(
                "https://api.perplexity.ai/chat/completions",
                headers=headers,
                json=payload,
            )
            logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Perplexity API: –°—Ç–∞—Ç—É—Å {res.status_code}")
            if res.status_code == 401:
                 logger.error("–û—à–∏–±–∫–∞ 401 Unauthorized –æ—Ç Perplexity API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PPLX_API_KEY.")
                 await ctx.bot.send_message(config.ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) Perplexity. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.")
                 return

            res.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–≤–∫–ª—é—á–∞—è 400 Bad Request –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏)
            data = res.json()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Perplexity: {str(data)[:500]}...")

        if isinstance(data, dict) and "choices" in data and data["choices"] and \
           isinstance(data["choices"][0], dict) and "message" in data["choices"][0] and \
           isinstance(data["choices"][0]["message"], dict) and "content" in data["choices"][0]["message"]:

            text = data["choices"][0]["message"]["content"].strip()
            if text:
                logger.info(f"Perplexity —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
                await ctx.bot.send_message(config.ADMIN_ID, f"üí° –ß–µ—Ä–Ω–æ–≤–∏–∫ (Perplexity):\n{text}", reply_markup=INLINE_ACTION_KB)
            else:
                logger.warning("Perplexity API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π 'content'.")
                await ctx.bot.send_message(config.ADMIN_ID, "‚ùå Perplexity API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        else:
            error_detail = data.get('error', {}).get('message', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞')
            logger.error(f"–û—à–∏–±–∫–∞ API Perplexity –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {error_detail} | –û—Ç–≤–µ—Ç: {data}")
            await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ API Perplexity: {error_detail}")

    except httpx.HTTPStatusError as e:
         error_body = e.response.text[:200] if hasattr(e.response, 'text') else '(–Ω–µ—Ç —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞)'
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code} –æ—Ç Perplexity: {error_body}", exc_info=False)
         # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code} –æ—Ç Perplexity API.")
    except httpx.RequestError as e:
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity: {e}", exc_info=True)
         await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Perplexity: {type(e).__name__}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ research_perplexity: {e}", exc_info=True)
        try:
            await ctx.bot.send_message(config.ADMIN_ID, f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—ë—Ä—á–µ: {type(e).__name__}")
        except Exception as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ research_perplexity –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /schedule (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ") ---
async def show_schedule(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    schedule_text = "‚öôÔ∏è **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:**\n\n"
    if ctx.job_queue:
        jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
        if jobs:
            job = jobs[0]
            trigger = job.trigger
            next_run_time = job.next_t

            run_hour = getattr(trigger, 'hour', None)
            run_minute = getattr(trigger, 'minute', 0)

            if run_hour is not None:
                try:
                    scheduled_time_str = f"{int(run_hour):02d}:{int(run_minute):02d}"
                    schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**.\n"
                    schedule_text += f"üïí –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ **{scheduled_time_str} UTC** –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n\n"
                except (ValueError, TypeError):
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞: hour={run_hour}, minute={run_minute}")
                    schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
                if next_run_time:
                     schedule_text += f"‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\n\n"
                else:
                     schedule_text += f"‚ñ∂Ô∏è –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.\n\n"
            else:
                schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞.\n"
                if next_run_time:
                    schedule_text += f"üïí –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\n\n"
                else:
                    schedule_text += f"üïí –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.\n\n"
            schedule_text += f"–ù–∞–∂–º–∏—Ç–µ [üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç], —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å."
        else:
            schedule_text += f"‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤—ã–∫–ª—é—á–µ–Ω**.\n\n"
            schedule_text += f"–ù–∞–∂–º–∏—Ç–µ [üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É], —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å."
    else:
        schedule_text += "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    try:
        await update.message.reply_text(schedule_text, parse_mode=ParseMode.MARKDOWN)
    except (TelegramError, Forbidden) as e:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /schedule –∞–¥–º–∏–Ω—É: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /stop_auto (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç") ---
async def stop_auto_post(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    if not ctx.job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è stop_auto_post.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
    if jobs:
        removed_count = 0
        for job in jobs:
            job.schedule_removal()
            removed_count += 1
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–¥–∞—á '{config.DAILY_AUTO_POST_JOB}' –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞.")
        await update.message.reply_text("üõë –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        logger.info("–ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await update.message.reply_text("‚ÑπÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")


# --- –°–±–æ—Ä–∫–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ ---
start_handler = CommandHandler("start", start)
idea_handler = CommandHandler("idea", generate_idea)
news_handler = CommandHandler("news", generate_news_post)
stats_handler = CommandHandler("stats", show_stats)
auto_best_handler = CommandHandler("auto_best", set_auto_post_best_time)
weekly_report_handler = CommandHandler("weekly", weekly_report)
research_handler = CommandHandler("research", research_perplexity)
schedule_handler = CommandHandler("schedule", show_schedule)
stop_auto_handler = CommandHandler("stop_auto", stop_auto_post)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ bot.py
command_handlers = [
    start_handler, idea_handler, news_handler, stats_handler,
    auto_best_handler, weekly_report_handler, research_handler,
    schedule_handler, stop_auto_handler
]

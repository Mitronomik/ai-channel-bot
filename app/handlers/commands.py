import logging
import httpx
import requests # –î–ª—è Perplexity
import feedparser # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
from datetime import datetime, time as dtime
import pandas as pd

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, CommandHandler
from telegram.constants import ParseMode
from telegram.error import TelegramError

from .. import config
from ..openai_client import get_async_openai_client # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –∫–ª–∏–µ–Ω—Ç
from ..post_logger import read_top_posts, read_posts, log_post
from ..prompts import PROMPT_TMPL_IDEA, PROMPT_TMPL_NEWS, PROMPT_TMPL_RESEARCH
from ..utils import get_best_posting_time
from .callbacks import INLINE_ACTION_KB # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
from .jobs import auto_post_job # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞

logger = logging.getLogger(__name__)

# --- Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é) ---
MENU_KB = ReplyKeyboardMarkup(
    [
        ["üí° –ò–¥–µ—è", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É"], # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        ["üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", "üîç –†–µ—Å—ë—Ä—á PPLX"], # –£—Ç–æ—á–Ω–∏–ª —Ä–µ—Å–µ—Ä—á
        ["‚öôÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç"], # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
        # ["üéØ –ê–≤—Ç–æ–∏–¥–µ–∏", "üìÖ –¶–∏–∫–ª —Ç–µ–º"], # –£–±—Ä–∞–ª, —Ç.–∫. –ª–æ–≥–∏–∫–∞ —Ü–∏–∫–ª–∞ —Ç–µ–º –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    ],
    resize_keyboard=True,
    one_time_keyboard=False, # –î–µ–ª–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π
    is_persistent=True
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω—É."""
    if update.effective_user.id != config.ADMIN_ID:
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /start –æ—Ç user_id: {update.effective_user.id}")
        return
    await update.message.reply_text(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MENU_KB
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /idea (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí° –ò–¥–µ—è") ---
async def generate_idea(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI."""
    if update.effective_user.id != config.ADMIN_ID: return
    await update.message.reply_chat_action(action='typing') # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –ª–æ–≥–∞
        top_posts_df = read_top_posts(5)
        if not top_posts_df.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ä–µ–∞–∫—Ü–∏–∏)
            posts_context = top_posts_df[['text', 'reactions']].to_string(index=False, header=True)
        else:
            posts_context = "(–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–∞—Ö)"
        logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏:\n{posts_context}")

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = PROMPT_TMPL_IDEA.format(posts=posts_context)

        # 3. –í—ã–∑—ã–≤–∞–µ–º OpenAI API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        openai_client = get_async_openai_client()
        draft = None
        last_err = None
        used_model = config.MODEL # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏

        async def try_generate(model_name):
            nonlocal draft, last_err, used_model
            try:
                 logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI (–º–æ–¥–µ–ª—å: {model_name}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏...")
                 resp = await openai_client.chat.completions.create(
                    model=model_name,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=400, # –£–≤–µ–ª–∏—á–∏–º –Ω–µ–º–Ω–æ–≥–æ –ª–∏–º–∏—Ç
                    temperature=0.75, # –ß—É—Ç—å –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                 )
                 draft = resp.choices[0].message.content.strip()
                 used_model = model_name
                 logger.info(f"–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å—é {model_name}.")
                 return True # –£—Å–ø–µ—Ö
            except Exception as e:
                 last_err = e
                 logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                 return False # –ù–µ—É–¥–∞—á–∞

        # –ü—ã—Ç–∞–µ–º—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é
        success = await try_generate(config.MODEL)

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å gpt-3.5-turbo (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–Ω–∞—è)
        if not success and config.MODEL != "gpt-3.5-turbo":
             logger.warning(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å {config.MODEL} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É—é gpt-3.5-turbo...")
             success = await try_generate("gpt-3.5-turbo")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        if success and draft:
            notice = "üí° –ß–µ—Ä–Ω–æ–≤–∏–∫:"
            if used_model != config.MODEL:
                 notice = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {used_model}.\n{notice}"
            await ctx.bot.send_message(
                 chat_id=config.ADMIN_ID,
                 text=f"{notice}\n{draft}",
                 reply_markup=INLINE_ACTION_KB # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å
            )
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_err}"
            logger.error(error_message)
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=error_message)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_idea: {e}", exc_info=True)
        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /news (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì∞ –ù–æ–≤–æ—Å—Ç–∏") ---
async def generate_news_post(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS."""
    if update.effective_user.id != config.ADMIN_ID: return
    await update.message.reply_chat_action(action='typing')

    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –ª–µ–Ω—Ç—É
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS: {config.NEWS_RSS_URL}")
        feed = feedparser.parse(config.NEWS_RSS_URL)

        if not feed.entries:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS –∏–ª–∏ –ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞.")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS.")
            return

        # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5-7 –Ω–æ–≤–æ—Å—Ç–µ–π)
        news_items_context = ""
        for entry in feed.entries[:7]:
            title = entry.title
            summary = entry.summary if 'summary' in entry else ''
            # –û—á–∏—Å—Ç–∫–∞ HTML –∏–∑ summary (–µ—Å–ª–∏ –µ—Å—Ç—å)
            from bs4 import BeautifulSoup
            summary_text = BeautifulSoup(summary, "html.parser").get_text()
            news_items_context += f"- {title}: {summary_text[:150]}...\n" # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–∏—Å–∞–Ω–∏—è

        if not news_items_context:
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π.")
             return

        logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n{news_items_context}")

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = PROMPT_TMPL_NEWS.format(news_items=news_items_context)

        # 4. –í—ã–∑—ã–≤–∞–µ–º OpenAI API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        openai_client = get_async_openai_client()
        draft = None
        last_err = None
        used_model = config.MODEL

        async def try_generate_news(model_name):
            nonlocal draft, last_err, used_model
            try:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI (–º–æ–¥–µ–ª—å: {model_name}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
                resp = await openai_client.chat.completions.create(
                    model=model_name,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=500, # –õ–∏–º–∏—Ç –¥–ª—è –ø–æ—Å—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
                    temperature=0.6, # –ë–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
                )
                draft = resp.choices[0].message.content.strip()
                used_model = model_name
                logger.info(f"–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é {model_name}.")
                return True
            except Exception as e:
                last_err = e
                logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (–Ω–æ–≤–æ—Å—Ç–∏): {e}")
                return False

        success = await try_generate_news(config.MODEL)
        if not success and config.MODEL != "gpt-3.5-turbo":
            logger.warning(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å {config.MODEL} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–±—É—é gpt-3.5-turbo...")
            success = await try_generate_news("gpt-3.5-turbo")

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        if success and draft:
            notice = "üì∞ –ù–æ–≤–æ—Å—Ç—å:"
            if used_model != config.MODEL:
                 notice = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {used_model}.\n{notice}"
            await ctx.bot.send_message(
                 chat_id=config.ADMIN_ID,
                 text=f"{notice}\n{draft}",
                 reply_markup=INLINE_ACTION_KB
            )
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_err}"
            logger.error(error_message)
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=error_message)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_news_post: {e}", exc_info=True)
        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /stats (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") ---
async def show_stats(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª—É—á—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä–∞—Ñ–∏–∫."""
    if update.effective_user.id != config.ADMIN_ID: return
    await update.message.reply_chat_action(action='upload_photo') # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ

    try:
        best_time, plot_path = get_best_posting_time()
        message = f"üìä –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:\n\n"
        message += f"üïí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–∏—Å–ª—É —Ä–µ–∞–∫—Ü–∏–π): **{best_time}**\n\n"
        message += f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º:"

        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=message, parse_mode=ParseMode.MARKDOWN)

        if plot_path and plot_path.exists():
            try:
                 await ctx.bot.send_photo(chat_id=config.ADMIN_ID, photo=InputFile(plot_path))
                 logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {plot_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
            except TelegramError as e:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {plot_path}: {e}")
                 await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞.")
            except FileNotFoundError:
                 logger.error(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {plot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                 await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ö†Ô∏è –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif plot_path:
            logger.warning(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {plot_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ö–æ—Ç—è –ø—É—Ç—å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω.")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö).")
        else:
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="üìâ –ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞).")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_stats: {e}", exc_info=True)
        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /auto_best (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É") ---
async def set_auto_post_best_time(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è."""
    if update.effective_user.id != config.ADMIN_ID: return

    if not ctx.job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        best_time_str, _ = get_best_posting_time()
        hour = int(best_time_str.split(":")[0])
        post_time = dtime(hour=hour, minute=0, second=0) # –í—Ä–µ–º—è –ß–ß:00

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Å –¢–ï–ú –ñ–ï –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        current_jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
        for job in current_jobs:
            job.schedule_removal()
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {job.name}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        ctx.job_queue.run_daily(
            callback=auto_post_job, # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
            time=post_time,
            name=config.DAILY_AUTO_POST_JOB,
            chat_id=config.ADMIN_ID, # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –≤ –∑–∞–¥–∞—á—É (–∏–ª–∏ –∫–∞–Ω–∞–ª–∞)
            user_id=config.ADMIN_ID, # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è job.data (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            data={"channel_id": config.CHANNEL_ID} # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ
        )

        logger.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ '{config.DAILY_AUTO_POST_JOB}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {post_time.strftime('%H:%M')} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.")
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ **{hour:02d}:00** (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞).", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /weekly_report (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é") ---
async def weekly_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."""
    if update.effective_user.id != config.ADMIN_ID: return
    await update.message.reply_chat_action(action='typing')

    try:
        df = read_posts()
        if df.empty or 'dt' not in df.columns:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç).")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        now = datetime.now(df['dt'].dt.tz) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∑–æ–Ω—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ UTC/–ª–æ–∫–∞–ª—å–Ω—É—é
        one_week_ago = now - pd.Timedelta(days=7)
        weekly_df = df[df['dt'] > one_week_ago].copy() # –ò—Å–ø–æ–ª—å–∑—É–µ–º .copy() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SettingWithCopyWarning

        if weekly_df.empty:
            await update.message.reply_text("üìâ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ª–æ–≥–µ.")
            return

        # –ê–Ω–∞–ª–∏–∑
        total_posts = len(weekly_df)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fillna(0) –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ –≥–¥–µ-—Ç–æ NaN
        average_reactions = weekly_df['reactions'].fillna(0).mean()
        total_reactions = weekly_df['reactions'].fillna(0).sum()
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-3 –ø–æ—Å—Ç–∞ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º
        top_posts = weekly_df.sort_values("reactions", ascending=False).head(3)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìÖ **–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é** ({one_week_ago.strftime('%d.%m')} - {now.strftime('%d.%m')})\n\n"
        report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
        report += f"üìà –°—É–º–º–∞ —Ä–µ–∞–∫—Ü–∏–π: {total_reactions:.0f}\n"
        report += f"üìä –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ä–µ–∞–∫—Ü–∏–π: {average_reactions:.1f}\n\n"

        if not top_posts.empty:
            report += "üèÜ **–¢–æ–ø-3 –ø–æ—Å—Ç–∞ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º:**\n"
            for index, row in top_posts.iterrows():
                 # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                 text_preview = row['text'].replace('\n', ' ')[:70]
                 report += f"  üî• {row['reactions']:.0f} —Ä–µ–∞–∫—Ü–∏–π - _{text_preview}..._\n"
        else:
            report += "‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.\n"

        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=report, parse_mode=ParseMode.MARKDOWN)
        logger.info("–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /research (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîç –†–µ—Å—ë—Ä—á PPLX") ---
async def research_perplexity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Perplexity API."""
    if update.effective_user.id != config.ADMIN_ID: return

    if not config.PPLX_API_KEY:
        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùóÔ∏è API-–∫–ª—é—á Perplexity (PPLX_API_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (.env). –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    query = " ".join(ctx.args) if ctx.args else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞" # –ó–∞–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await update.message.reply_text(f"üî¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' —á–µ—Ä–µ–∑ Perplexity...")
    await update.message.reply_chat_action(action='typing')

    headers = {
        "Authorization": f"Bearer {config.PPLX_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    payload = {
        "model": "llama-3-sonar-large-32k-online", # –ò–ª–∏ –¥—Ä—É–≥–∞—è –æ–Ω–ª–∞–π–Ω-–º–æ–¥–µ–ª—å pplx, –Ω–∞–ø—Ä–∏–º–µ—Ä 'pplx-7b-online'
        "messages": [
            {"role": "system", "content": "You are an AI assistant writing concise and engaging Telegram posts."},
            {"role": "user", "content": PROMPT_TMPL_RESEARCH.format(query=query)}
        ],
        "stream": False,
         # "max_tokens": 150, # –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å, –Ω–æ –ø—Ä–æ–º–ø—Ç —É–∂–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç
    }

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ requests –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ)
        async with httpx.AsyncClient(timeout=45.0) as client: # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç
            res = await client.post(
                "https://api.perplexity.ai/chat/completions",
                headers=headers,
                json=payload,
            )
            res.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
            data = res.json()

        if "choices" in data and data["choices"]:
            text = data["choices"][0]["message"]["content"].strip()
            logger.info(f"Perplexity —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            await ctx.bot.send_message(
                chat_id=config.ADMIN_ID,
                text=f"üí° –ß–µ—Ä–Ω–æ–≤–∏–∫ (Perplexity):\n{text}",
                reply_markup=INLINE_ACTION_KB
            )
        else:
            error_detail = data.get('error', {}).get('message', '–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö')
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç API Perplexity: {error_detail} | –û—Ç–≤–µ—Ç: {data}")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ API Perplexity: {error_detail}")

    except httpx.HTTPStatusError as e:
         error_body = e.response.text
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity API: {e.response.status_code} - {e.request.url}\n{error_body}", exc_info=True)
         await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code} –æ—Ç Perplexity API.\n{error_body[:200]}")
    except httpx.RequestError as e:
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity API: {e}", exc_info=True)
         await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Perplexity: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ research_perplexity: {e}", exc_info=True)
        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—ë—Ä—á–µ: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /schedule (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ") ---
async def show_schedule(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    if update.effective_user.id != config.ADMIN_ID: return

    schedule_text = "‚öôÔ∏è **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:**\n\n"
    if ctx.job_queue:
        jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
        if jobs:
            # –ë–µ—Ä–µ–º –≤—Ä–µ–º—è –∏–∑ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞)
            next_run_time = jobs[0].next_t # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ UTC
            if next_run_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                # local_tz = datetime.now().astimezone().tzinfo # –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞
                # local_run_time = next_run_time.astimezone(local_tz)
                # schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**.\n"
                # schedule_text += f"üïí –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ –≤: **{local_run_time.strftime('%H:%M')}** (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞) –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n\n"
                # –ü—Ä–æ—â–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏:
                run_hour = jobs[0].job.trigger.time.hour
                schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**.\n"
                schedule_text += f"üïí –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ **{run_hour:02d}:00** –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n\n"

            else:
                 schedule_text += f"‚ö†Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω, –Ω–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞).\n\n"
            schedule_text += f"–ù–∞–∂–º–∏—Ç–µ [üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç], —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å."

        else:
            schedule_text += f"‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤—ã–∫–ª—é—á–µ–Ω**.\n\n"
            schedule_text += f"–ù–∞–∂–º–∏—Ç–µ [üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É], —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è."
    else:
        schedule_text += "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω."

    await update.message.reply_text(schedule_text, parse_mode=ParseMode.MARKDOWN)


# --- –ö–æ–º–∞–Ω–¥–∞ /stop_auto (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç") ---
async def stop_auto_post(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥."""
    if update.effective_user.id != config.ADMIN_ID: return

    if not ctx.job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
    if jobs:
        for job in jobs:
            job.schedule_removal()
            logger.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ '{job.name}' —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await update.message.reply_text("üõë –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")


# --- –°–±–æ—Ä–∫–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ ---
start_handler = CommandHandler("start", start)
idea_handler = CommandHandler("idea", generate_idea)
news_handler = CommandHandler("news", generate_news_post)
stats_handler = CommandHandler("stats", show_stats)
auto_best_handler = CommandHandler("auto_best", set_auto_post_best_time)
weekly_report_handler = CommandHandler("weekly", weekly_report) # /weekly –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
research_handler = CommandHandler("research", research_perplexity)
schedule_handler = CommandHandler("schedule", show_schedule)
stop_auto_handler = CommandHandler("stop_auto", stop_auto_post)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ bot.py
command_handlers = [
    start_handler, idea_handler, news_handler, stats_handler,
    auto_best_handler, weekly_report_handler, research_handler,
    schedule_handler, stop_auto_handler
]

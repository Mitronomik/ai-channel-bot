# -*- coding: utf-8 -*-
import logging
import httpx
import requests # –î–ª—è Perplexity
import feedparser # –î–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
from datetime import datetime, time as dtime, timezone # –î–æ–±–∞–≤–ª–µ–Ω timezone
import pandas as pd

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, CommandHandler
from telegram.constants import ParseMode
from telegram.error import TelegramError, Forbidden # –î–æ–±–∞–≤–ª–µ–Ω–∞ Forbidden

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from .. import config
from ..openai_client import get_async_openai_client # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –∫–ª–∏–µ–Ω—Ç
from ..post_logger import read_top_posts, read_posts, log_post
from ..prompts import PROMPT_TMPL_IDEA, PROMPT_TMPL_NEWS, PROMPT_TMPL_RESEARCH
from ..utils import get_best_posting_time
from .callbacks import INLINE_ACTION_KB # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
from .jobs import auto_post_job # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞

logger = logging.getLogger(__name__)

# --- Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é) ---
MENU_KB = ReplyKeyboardMarkup(
    [
        ["üí° –ò–¥–µ—è", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É"],
        ["üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", "üîç –†–µ—Å—ë—Ä—á PPLX"],
        ["‚öôÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç"],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
    is_persistent=True
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω—É."""
    if not update.message or not update.effective_user: return # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞
    user_id = update.effective_user.id
    if user_id != config.ADMIN_ID:
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /start –æ—Ç user_id: {user_id}")
        return
    try:
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=MENU_KB
        )
    except (TelegramError, Forbidden) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {user_id}: {e}")

# --- –ö–æ–º–∞–Ω–¥–∞ /idea (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí° –ò–¥–µ—è") ---
async def generate_idea(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'typing': {e}")

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –ª–æ–≥–∞
        logger.debug("–ó–∞–ø—Ä–æ—Å —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏...")
        top_posts_df = read_top_posts(5)
        if not top_posts_df.empty:
            posts_context = top_posts_df[['text', 'reactions']].to_string(index=False, header=True)
            logger.debug(f"–¢–æ–ø –ø–æ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –ö–æ–Ω—Ç–µ–∫—Å—Ç ({len(posts_context)} —Å–∏–º–≤.):\n{posts_context[:500]}...")
        else:
            posts_context = "(–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–∞—Ö)"
            logger.debug("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—à–ª—ã—Ö –ø–æ—Å—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = PROMPT_TMPL_IDEA.format(posts=posts_context)
        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI ({len(prompt)} —Å–∏–º–≤.).")

        # 3. –í—ã–∑—ã–≤–∞–µ–º OpenAI API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        openai_client = get_async_openai_client() # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        if not openai_client: # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è generate_idea.")
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI.")
             return

        draft = None
        last_err = None
        used_model = config.MODEL

        async def try_generate(model_name):
            nonlocal draft, last_err, used_model
            try:
                 logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI (–º–æ–¥–µ–ª—å: {model_name}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏...")
                 resp = await openai_client.chat.completions.create(
                    model=model_name,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=400,
                    temperature=0.75,
                 )
                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                 if resp.choices and resp.choices[0].message and resp.choices[0].message.content:
                     draft = resp.choices[0].message.content.strip()
                     used_model = model_name
                     logger.info(f"–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å—é {model_name}.")
                     return True
                 else:
                     logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI –º–æ–¥–µ–ª–∏ {model_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                     last_err = "–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
                     return False
            except Exception as e:
                 last_err = e
                 logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {type(e).__name__}: {e}")
                 return False

        # –ü—ã—Ç–∞–µ–º—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {config.MODEL}")
        success = await try_generate(config.MODEL)

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π
        if not success and config.MODEL != "gpt-3.5-turbo":
             logger.warning(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å {config.MODEL} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É—é gpt-3.5-turbo...")
             success = await try_generate("gpt-3.5-turbo")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        if success and draft:
            notice = "üí° –ß–µ—Ä–Ω–æ–≤–∏–∫:"
            if used_model != config.MODEL:
                 notice = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {used_model}.\n{notice}"
            await ctx.bot.send_message(
                 chat_id=config.ADMIN_ID,
                 text=f"{notice}\n{draft}",
                 reply_markup=INLINE_ACTION_KB
            )
        elif draft is None and success: # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –ø—É—Å—Ç–æ–π draft
            error_message = "‚ùå –û—à–∏–±–∫–∞: OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
            logger.error(error_message)
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=error_message)
        else: # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
            error_message = f"‚ùå –û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {type(last_err).__name__}: {last_err}"
            logger.error(error_message, exc_info=isinstance(last_err, Exception)) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º traceback –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=error_message)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_idea: {e}", exc_info=True)
        try:
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {e}")
        except (TelegramError, Forbidden) as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ generate_idea –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /news (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì∞ –ù–æ–≤–æ—Å—Ç–∏") ---
async def generate_news_post(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'typing': {e}")

    rss_url = config.NEWS_RSS_URL
    if not rss_url:
         logger.error("URL RSS –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (NEWS_RSS_URL).")
         await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå URL RSS –ª–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
         return

    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –ª–µ–Ω—Ç—É
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS: {rss_url}")
        # –î–æ–±–∞–≤–ª—è–µ–º user-agent, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –±—Ä–∞—É–∑–µ—Ä
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}
        feed_data = {}
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ user-agent
            response = requests.get(rss_url, headers=headers, timeout=45)
            response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
            # feedparser –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å —Ç–µ–∫—Å—Ç–æ–º
            feed_data = feedparser.parse(response.content)
            logger.info(f"RSS –ª–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {feed_data.get('status', 'N/A')}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(feed_data.entries)}")
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ RSS {rss_url}: {e}")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return
        except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ feedparser
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS {rss_url}: {e}", exc_info=True)
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSS –ª–µ–Ω—Ç—ã: {e}")
            return


        if not feed_data or feed_data.get('bozo', 1) or not feed_data.entries:
            # bozo=1 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            bozo_exception = feed_data.get('bozo_exception', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞')
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS ({rss_url}) –∏–ª–∏ –ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞. Bozo: {feed_data.get('bozo', 'N/A')}, Exception: {bozo_exception}")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS: {bozo_exception}")
            return

        # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        news_items_context = ""
        from bs4 import BeautifulSoup # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç—É—Ç
        for entry in feed_data.entries[:7]: # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 7
            title = entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            summary = entry.get('summary', '')
            # –û—á–∏—Å—Ç–∫–∞ HTML –∏–∑ summary
            summary_text = BeautifulSoup(summary, "html.parser").get_text(separator=' ', strip=True)
            news_items_context += f"- {title}: {summary_text[:150]}...\n"

        if not news_items_context:
             logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∑–∞–ø–∏—Å–µ–π RSS.")
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS.")
             return

        logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n{news_items_context}")

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = PROMPT_TMPL_NEWS.format(news_items=news_items_context)

        # 4. –í—ã–∑—ã–≤–∞–µ–º OpenAI API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        openai_client = get_async_openai_client()
        if not openai_client:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è generate_news_post.")
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç OpenAI.")
             return

        draft = None
        last_err = None
        used_model = config.MODEL

        async def try_generate_news(model_name):
            nonlocal draft, last_err, used_model
            try:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI (–º–æ–¥–µ–ª—å: {model_name}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
                resp = await openai_client.chat.completions.create(
                    model=model_name,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=500,
                    temperature=0.6,
                )
                if resp.choices and resp.choices[0].message and resp.choices[0].message.content:
                     draft = resp.choices[0].message.content.strip()
                     used_model = model_name
                     logger.info(f"–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é {model_name}.")
                     return True
                else:
                     logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI –º–æ–¥–µ–ª–∏ {model_name} (–Ω–æ–≤–æ—Å—Ç–∏) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
                     last_err = "–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
                     return False
            except Exception as e:
                last_err = e
                logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (–Ω–æ–≤–æ—Å—Ç–∏): {type(e).__name__}: {e}")
                return False

        success = await try_generate_news(config.MODEL)
        if not success and config.MODEL != "gpt-3.5-turbo":
            logger.warning(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å {config.MODEL} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–±—É—é gpt-3.5-turbo...")
            success = await try_generate_news("gpt-3.5-turbo")

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
        if success and draft:
            notice = "üì∞ –ù–æ–≤–æ—Å—Ç—å:"
            if used_model != config.MODEL:
                 notice = f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å {used_model}.\n{notice}"
            await ctx.bot.send_message(
                 chat_id=config.ADMIN_ID,
                 text=f"{notice}\n{draft}",
                 reply_markup=INLINE_ACTION_KB
            )
        elif draft is None and success:
             error_message = "‚ùå –û—à–∏–±–∫–∞: OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏."
             logger.error(error_message)
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=error_message)
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {type(last_err).__name__}: {last_err}"
            logger.error(error_message, exc_info=isinstance(last_err, Exception))
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=error_message)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_news_post: {e}", exc_info=True)
        try:
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        except (TelegramError, Forbidden) as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ generate_news_post –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /stats (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") ---
async def show_stats(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª—É—á—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä–∞—Ñ–∏–∫."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='upload_photo')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'upload_photo': {e}")

    try:
        logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞...")
        best_time, plot_path = get_best_posting_time()
        message = f"üìä **–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π**\n\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown
        message += f"üïí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–∏—Å–ª—É —Ä–µ–∞–∫—Ü–∏–π): **{best_time}**\n\n"
        message += f"üìà –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º:"

        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=message, parse_mode=ParseMode.MARKDOWN)

        if plot_path and plot_path.exists():
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {plot_path}")
            try:
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º with open –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
                 with open(plot_path, "rb") as photo_file:
                     await ctx.bot.send_photo(chat_id=config.ADMIN_ID, photo=photo_file)
                 logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {plot_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
            except FileNotFoundError:
                 logger.error(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {plot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ö–æ—Ç—è exists() –≤–µ—Ä–Ω—É–ª True?).")
                 await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except (TelegramError, Forbidden) as e:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ {plot_path} –∞–¥–º–∏–Ω—É: {e}")
                 await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        elif plot_path:
            logger.warning(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {plot_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (plot_path –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω, –Ω–æ exists() == False).")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫.")
        else:
             logger.info("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏).")
             await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="üìâ –ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞).")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_stats: {e}", exc_info=True)
        try:
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        except (TelegramError, Forbidden) as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ show_stats –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /auto_best (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É") ---
async def set_auto_post_best_time(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    if not ctx.job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è set_auto_post_best_time.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...")
        best_time_str, _ = get_best_posting_time() # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≥—Ä–∞—Ñ–∏–∫—É
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            hour = int(best_time_str.split(":")[0])
        except (ValueError, IndexError) as time_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è '{best_time_str}': {time_e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            hour = int(config.DEFAULT_POST_TIME.split(":")[0]) # –ë–µ—Ä–µ–º —á–∞—Å –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            best_time_str = f"{hour:02d}:00" # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        post_time = dtime(hour=hour, minute=0, second=0, tzinfo=timezone.utc) # –£–∫–∞–∑—ã–≤–∞–µ–º UTC —è–≤–Ω–æ, PTB —Ä–∞–±–æ—Ç–∞–µ—Ç —Å UTC
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {post_time.strftime('%H:%M')} UTC")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Å –¢–ï–ú –ñ–ï –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        current_jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
        removed_count = 0
        for job in current_jobs:
            job.schedule_removal()
            removed_count += 1
        if removed_count > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –∏–º–µ–Ω–µ–º '{config.DAILY_AUTO_POST_JOB}'.")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        ctx.job_queue.run_daily(
            callback=auto_post_job, # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
            time=post_time,         # –í—Ä–µ–º—è UTC
            name=config.DAILY_AUTO_POST_JOB,
            # chat_id –∏ user_id –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –≤ run_daily –≤ PTB v20, –∏—Å–ø–æ–ª—å–∑—É–µ–º data
            data={"channel_id": config.CHANNEL_ID, "admin_id": config.ADMIN_ID} # –ü–µ—Ä–µ–¥–∞–µ–º –Ω—É–∂–Ω—ã–µ ID
        )

        logger.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ '{config.DAILY_AUTO_POST_JOB}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {post_time.strftime('%H:%M')} UTC –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.")
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ **{best_time_str} UTC** (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞).", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}", exc_info=True)
        try:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {e}")
        except (TelegramError, Forbidden) as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ set_auto_post_best_time –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /weekly_report (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é") ---
async def weekly_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    try:
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat_action 'typing': {e}")

    try:
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        df = read_posts()
        if df.empty or 'dt' not in df.columns or df['dt'].isnull().all():
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞—Ç).")
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç).")
            return

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ dt –∏–º–µ–µ—Ç —Ç–∞–π–º–∑–æ–Ω—É (–∏–Ω–∞—á–µ now() –±—É–¥–µ—Ç offset-naive/aware mismatch)
        if df['dt'].dt.tz is None:
            logger.warning("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –ª–æ–≥–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è UTC.")
            df['dt'] = df['dt'].dt.tz_localize(timezone.utc)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        now = datetime.now(timezone.utc) # –†–∞–±–æ—Ç–∞–µ–º –≤ UTC
        one_week_ago = now - pd.Timedelta(days=7)
        weekly_df = df[df['dt'] > one_week_ago].copy()

        if weekly_df.empty:
            logger.info("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ª–æ–≥–µ.")
            await update.message.reply_text("üìâ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –ª–æ–≥–µ.")
            return

        # –ê–Ω–∞–ª–∏–∑
        total_posts = len(weekly_df)
        average_reactions = weekly_df['reactions'].fillna(0).mean()
        total_reactions = weekly_df['reactions'].fillna(0).sum()
        top_posts = weekly_df.nlargest(3, 'reactions') # –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ —Ç–æ–ø N

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìÖ **–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é** ({one_week_ago.strftime('%d.%m.%Y')} - {now.strftime('%d.%m.%Y')})\n\n"
        report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
        report += f"üìà –°—É–º–º–∞ —Ä–µ–∞–∫—Ü–∏–π: {int(total_reactions)}\n" # –£–±—Ä–∞–ª–∏ .0f
        report += f"üìä –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ä–µ–∞–∫—Ü–∏–π: {average_reactions:.1f}\n\n"

        if not top_posts.empty:
            report += "üèÜ **–¢–æ–ø-3 –ø–æ—Å—Ç–∞ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º:**\n"
            for index, row in top_posts.iterrows():
                 text_preview = row['text'].replace('\n', ' ').strip()[:70]
                 report += f"  üî• {int(row['reactions'])} —Ä–µ–∞–∫—Ü–∏–π - _{text_preview}..._\n" # –£–±—Ä–∞–ª–∏ .0f
        else:
            report += "‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.\n"

        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=report, parse_mode=ParseMode.MARKDOWN)
        logger.info("–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        try:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        except (TelegramError, Forbidden) as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ weekly_report –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /research (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîç –†–µ—Å—ë—Ä—á PPLX") ---
async def research_perplexity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Perplexity API."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    if not config.PPLX_API_KEY:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Perplexity –±–µ–∑ API –∫–ª—é—á–∞.")
        await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùóÔ∏è API-–∫–ª—é—á Perplexity (PPLX_API_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (.env). –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    query = " ".join(ctx.args) if ctx.args else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Perplexity API –ø–æ —Ç–µ–º–µ: '{query}'")
    try:
        await update.message.reply_text(f"üî¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' —á–µ—Ä–µ–∑ Perplexity...")
        await update.message.reply_chat_action(action='typing')
    except TelegramError as e:
         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/chat_action –≤ research_perplexity: {e}")


    headers = {
        "Authorization": f"Bearer {config.PPLX_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    # –ú–æ–¥–µ–ª—å Perplexity - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: https://docs.perplexity.ai/docs/model-cards
    # sonar-small-32k-online / sonar-large-32k-online
    payload = {
        "model": "sonar",
        "messages": [
            {"role": "system", "content": "You are an AI assistant writing concise and engaging Telegram posts."},
            {"role": "user", "content": PROMPT_TMPL_RESEARCH.format(query=query)}
        ],
        "stream": False,
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å temperature, max_tokens –∏ —Ç.–¥. –ø–æ –∂–µ–ª–∞–Ω–∏—é
    }

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async with httpx.AsyncClient(timeout=60.0) as client: # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
            res = await client.post(
                "https://api.perplexity.ai/chat/completions",
                headers=headers,
                json=payload,
            )
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Perplexity API: –°—Ç–∞—Ç—É—Å {res.status_code}")
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 401
            if res.status_code == 401:
                 logger.error("–û—à–∏–±–∫–∞ 401 Unauthorized –æ—Ç Perplexity API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PPLX_API_KEY.")
                 await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) —Å Perplexity API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à PPLX_API_KEY –≤ .env.")
                 return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å raise_for_status()

            res.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
            data = res.json()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Perplexity: {str(data)[:500]}...") # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(data, dict) and "choices" in data and data["choices"] and \
           isinstance(data["choices"][0], dict) and "message" in data["choices"][0] and \
           isinstance(data["choices"][0]["message"], dict) and "content" in data["choices"][0]["message"]:

            text = data["choices"][0]["message"]["content"].strip()
            if text:
                logger.info(f"Perplexity —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
                await ctx.bot.send_message(
                    chat_id=config.ADMIN_ID,
                    text=f"üí° –ß–µ—Ä–Ω–æ–≤–∏–∫ (Perplexity):\n{text}",
                    reply_markup=INLINE_ACTION_KB
                )
            else:
                logger.warning("Perplexity API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π 'content' –≤ –æ—Ç–≤–µ—Ç–µ.")
                await ctx.bot.send_message(chat_id=config.ADMIN_ID, text="‚ùå –û—à–∏–±–∫–∞: Perplexity API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        else:
            error_detail = data.get('error', {}).get('message', '–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É')
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç API Perplexity –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {error_detail} | –û—Ç–≤–µ—Ç: {data}")
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ API Perplexity: {error_detail}")

    except httpx.HTTPStatusError as e:
         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5xx)
         error_body = e.response.text[:200] if hasattr(e.response, 'text') else '(–Ω–µ—Ç —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞)'
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity API: {error_body}", exc_info=True)
         await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code} –æ—Ç Perplexity API.\n{error_body}")
    except httpx.RequestError as e:
         # –û—à–∏–±–∫–∏ —Å–µ—Ç–∏/—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
         logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity API: {e}", exc_info=True)
         await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Perplexity: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ research_perplexity: {e}", exc_info=True)
        try:
            await ctx.bot.send_message(chat_id=config.ADMIN_ID, text=f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—ë—Ä—á–µ: {e}")
        except (TelegramError, Forbidden) as send_e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ research_perplexity –∞–¥–º–∏–Ω—É: {send_e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /schedule (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ") (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ---
async def show_schedule(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    schedule_text = "‚öôÔ∏è **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:**\n\n"
    if ctx.job_queue:
        jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
        if jobs:
            # –ï—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
            job = jobs[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞)
            trigger = job.trigger
            next_run_time = job.next_t # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            run_hour = getattr(trigger, 'hour', None)
            run_minute = getattr(trigger, 'minute', 0) # –î–µ—Ñ–æ–ª—Ç 0, –µ—Å–ª–∏ –Ω–µ—Ç

            if run_hour is not None:
                # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ int/str
                try:
                    scheduled_time_str = f"{int(run_hour):02d}:{int(run_minute):02d}"
                    schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**.\n"
                    schedule_text += f"üïí –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ **{scheduled_time_str} UTC** –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n\n"
                except (ValueError, TypeError):
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞: hour={run_hour}, minute={run_minute}")
                    schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∂–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if next_run_time:
                     # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∞–π–º–∑–æ–Ω—ã (UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è PTB)
                     schedule_text += f"‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\n\n"
                else:
                     schedule_text += f"‚ñ∂Ô∏è –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞).\n\n"

            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è run_daily)
                schedule_text += f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤–∫–ª—é—á–µ–Ω**, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞.\n"
                if next_run_time:
                    schedule_text += f"üïí –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\n\n"
                else:
                    schedule_text += f"üïí –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.\n\n"

            # –û–±—â–∞—è —á–∞—Å—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
            schedule_text += f"–ù–∞–∂–º–∏—Ç–µ [üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç], —á—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å."

        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç
            schedule_text += f"‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ **–≤—ã–∫–ª—é—á–µ–Ω**.\n\n"
            schedule_text += f"–ù–∞–∂–º–∏—Ç–µ [üïí –ê–≤—Ç–æ –ø–æ –ª—É—á—à–µ–º—É], —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è."
    else:
        # –ï—Å–ª–∏ JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        schedule_text += "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await update.message.reply_text(schedule_text, parse_mode=ParseMode.MARKDOWN)
    except (TelegramError, Forbidden) as e:
         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /schedule –∞–¥–º–∏–Ω—É: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /stop_auto (–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç") ---
async def stop_auto_post(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥."""
    if not update.message or not update.effective_user: return
    if update.effective_user.id != config.ADMIN_ID: return

    if not ctx.job_queue:
        logger.error("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è stop_auto_post.")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    jobs = ctx.job_queue.get_jobs_by_name(config.DAILY_AUTO_POST_JOB)
    if jobs:
        removed_count = 0
        for job in jobs:
            job.schedule_removal()
            removed_count += 1
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –∏–º–µ–Ω–µ–º '{config.DAILY_AUTO_POST_JOB}' –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await update.message.reply_text("üõë –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        logger.info("–ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await update.message.reply_text("‚ÑπÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á).")


# --- –°–±–æ—Ä–∫–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ ---
start_handler = CommandHandler("start", start)
idea_handler = CommandHandler("idea", generate_idea)
news_handler = CommandHandler("news", generate_news_post)
stats_handler = CommandHandler("stats", show_stats)
auto_best_handler = CommandHandler("auto_best", set_auto_post_best_time)
weekly_report_handler = CommandHandler("weekly", weekly_report) # /weekly –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
research_handler = CommandHandler("research", research_perplexity)
schedule_handler = CommandHandler("schedule", show_schedule)
stop_auto_handler = CommandHandler("stop_auto", stop_auto_post)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ bot.py
command_handlers = [
    start_handler, idea_handler, news_handler, stats_handler,
    auto_best_handler, weekly_report_handler, research_handler,
    schedule_handler, stop_auto_handler
]

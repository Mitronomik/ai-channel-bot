import logging
import sys
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler, # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ MessageHandler
    PicklePersistence, # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è jobs –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    Defaults
)
from telegram.constants import ParseMode
from pathlib import Path

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("openai").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.INFO) # –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å WARNING –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ PTB
logging.getLogger("apscheduler").setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(
    level=logging.INFO, # –û—Å–Ω–æ–≤–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ–¥–∞
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    stream=sys.stdout, # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ stdout (—Ö–æ—Ä–æ—à–æ –¥–ª—è Docker)
    # filename='bot.log', # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    # filemode='a'
)
logger = logging.getLogger(__name__)

# --- –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
try:
    from app import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    from app.handlers import commands, callbacks, messages, channel_posts # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã —Å —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
except ValueError as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    sys.exit(1) # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞
except ImportError as e:
     logger.critical(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–µ—Ä–Ω–∞.")
     sys.exit(1)

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Defaults ---
    # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    defaults = Defaults(parse_mode=ParseMode.MARKDOWN)

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Persistence ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PicklePersistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è JobQueue –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    # –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/, –∫–æ—Ç–æ—Ä–∞—è –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ö–æ—Å—Ç–∞
    persistence_path = config.DATA_DIR / 'bot_persistence.pickle'
    persistence = PicklePersistence(filepath=persistence_path)
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤: {persistence_path}")


    # --- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    try:
        application = (
            ApplicationBuilder()
            .token(config.BOT_TOKEN)
            .defaults(defaults)
            .persistence(persistence) # –î–æ–±–∞–≤–ª—è–µ–º persistence
            .read_timeout(30) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ç–∏/API
            .get_updates_read_timeout(30)
            .connect_timeout(30)
            .write_timeout(30)
            .pool_timeout(30)
            .build()
        )
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot: {e}", exc_info=True)
        sys.exit(1)


    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ---
    # –ö–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä –≤ —Å–∞–º–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö)
    for handler in commands.command_handlers:
        application.add_handler(handler)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã: {handler.commands}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)
    application.add_handler(messages.text_menu_handler)
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –≤–Ω—É—Ç—Ä–∏)
    application.add_handler(callbacks.callback_handler)
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç - –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–æ–º —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!
    application.add_handler(channel_posts.channel_post_handler)
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).")
    # application.add_handler(channel_posts.edited_channel_post_handler) # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å OpenAI: {config.MODEL}")
    if config.OPENAI_PROXY:
        logger.info(f"üîå –ü—Ä–æ–∫—Å–∏ OpenAI: {config.OPENAI_PROXY}")
    else:
        logger.info("üîå –ü—Ä–æ–∫—Å–∏ OpenAI: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)
    # allowed_updates –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–ª—É—á–∞–ª —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    allowed_updates = [
        Update.MESSAGE, Update.CALLBACK_QUERY, Update.CHANNEL_POST, Update.EDITED_CHANNEL_POST
    ]
    application.run_polling(allowed_updates=allowed_updates, drop_pending_updates=True) # drop_pending_updates=True - —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

    logger.info("üèÅ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
         # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–µ –ø–æ–π–º–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ main
         logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ù–ï main(): {e}", exc_info=True)
         sys.exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
